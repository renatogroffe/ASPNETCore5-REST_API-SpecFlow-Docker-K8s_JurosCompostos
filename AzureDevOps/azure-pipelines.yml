# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'CONEXÃO ACR'
  imageRepository: 'apijuros'
  containerRegistry: 'teste.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'SECRET'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: dotnet --list-sdks
      displayName: Exibir versões instaladas do .NET
    - task: DotNetCoreCLI@2
      displayName: Executar testes automatizados
      inputs:
        command: 'test'
        projects: '**/APIFinancas.Especificacoes.csproj'
        testRunTitle: 'Testes do cálculo de juros compostos'
- stage: Build
  displayName: Build stage
  dependsOn: Tests
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          latest
    
    - script: echo "Apresentação - testes"
      displayName: Exibição de mensagem de teste

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'ENVIRONMENT AKS'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

